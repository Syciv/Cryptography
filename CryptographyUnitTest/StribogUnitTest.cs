using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Cryptography.Math;
using Cryptography.Algorithms.Hash;

namespace CryptographyUnitTest
{
    [TestClass]
    public class StribogUnitTest
    {
        [TestMethod]
        public void Stribog_L64()
        {
            ulong bits = 0xfcfcfcfcfcfcfcfc;
            ulong result = Stribog.Stribog_L64(bits);
            Console.WriteLine(Convert.ToString((long)result, 16));
        }

        [TestMethod]
        public void Stribog_L()
        {
            ulong bits = 0xfcfcfcfcfcfcfcfc;
            byte[] bytes = { 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc,
            0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc};
            var result = Stribog.Stribog_L(bytes);
            for(int i = 0; i < 64; i++)
            {
                Console.Write(Convert.ToString(result[i],16));
            }
            //Console.WriteLine(Convert.ToString((long)result, 16));
        }

        [TestMethod]
        public void StribogGetHash()
        {
            ulong bits = 0xfcfcfcfcfcfcfcfc;
            byte[] bytes = { 0xfb, 0xe2,0xe5,0xf0,0xee,0xe3,0xc8,0x20,0xfb,0xea,0xfa,0xeb,0xef,0x20,0xff,0xfb,0xf0,0xe1,0xe0,0xf0,0xf5,0x20,0xe0,0xed,0x20,
                0xe8,0xec,0xe0, 0xeb, 0xe5, 0xf0, 0xf2, 0xf1, 0x20,0xff,0xf0,0xee,0xec,0x20,0xf1,0x20,0xfa,0xf2,0xfe,0xe5,0xe2,0x20,0x2c, 0xe8, 0xf6, 0xf3,
                0xed, 0xe2, 0x20, 0xe8, 0xe6, 0xee, 0xe1, 0xe8, 0xf0,0xf2,0xd1,0x20,0x2c, 0xe8, 0xf0, 0xf2,  0xe5, 0xe2, 0x20, 0xe5, 0xd1};

            byte[] bytes2 = { 0xfb, 0xea, 0xfa, 0xeb, 0xef, 0x20, 0xff, 0xfb, 0xf0, 0xe1, 0xe0, 0xf0, 0xf5, 0x20, 0xe0, 0xed, 0x20, 0xe8, 0xec, 0xe0, 0xeb, 0xe5, 0xf0, 0xf2, 0xf1, 0x20, 0xff, 0xf0, 0xee, 0xec, 0x20, 0xf1,
            0x20, 0xfa, 0xf2, 0xfe, 0xe5, 0xe2, 0x20, 0x2c, 0xe8, 0xf6, 0xf3, 0xed, 0xe2, 0x20, 0xe8, 0xe6, 0xee, 0xe1, 0xe8, 0xf0, 0xf2, 0xd1, 0x20, 0x2c, 0xe8, 0xf0, 0xf2, 0xe5, 0xe2, 0x20, 0xe5, 0xd1};
            var result = Stribog.GetHash(bytes);
            for (int i = 0; i < 64; i++)
            {
                Console.Write(Convert.ToString(result[i], 16));
            }
            //Console.WriteLine(Convert.ToString((long)result, 16));
        }

        [TestMethod]
        public void Stribog_P()
        {
            byte[] bytes = { 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc,
            0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc};
            byte[] bytes2 = { 0xfb, 0xea, 0xfa, 0xeb, 0xef, 0x20, 0xff, 0xfb, 0xf0, 0xe1, 0xe0, 0xf0, 0xf5, 0x20, 0xe0, 0xed, 0x20, 0xe8, 0xec, 0xe0, 0xeb, 0xe5, 0xf0, 0xf2, 0xf1, 0x20, 0xff, 0xf0, 0xee, 0xec, 0x20, 0xf1,
            0x20, 0xfa, 0xf2, 0xfe, 0xe5, 0xe2, 0x20, 0x2c, 0xe8, 0xf6, 0xf3, 0xed, 0xe2, 0x20, 0xe8, 0xe6, 0xee, 0xe1, 0xe8, 0xf0, 0xf2, 0xd1, 0x20, 0x2c, 0xe8, 0xf0, 0xf2, 0xe5, 0xe2, 0x20, 0xe5, 0xd1};

            var result = Stribog.Stribog_L(bytes);

            result = Stribog.Stribog_E(result, bytes2);

            for (int i = 0; i < 64; i++)
            {
                Console.Write(Convert.ToString(result[i], 16));
            }
        }

        [TestMethod]
        public void Stribog_g()
        {
            byte[] bytes = { 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc,
            0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc};
            byte[] bytes2 = { 0xfb, 0xea, 0xfa, 0xeb, 0xef, 0x20, 0xff, 0xfb, 0xf0, 0xe1, 0xe0, 0xf0, 0xf5, 0x20, 0xe0, 0xed, 0x20, 0xe8, 0xec, 0xe0, 0xeb, 0xe5, 0xf0, 0xf2, 0xf1, 0x20, 0xff, 0xf0, 0xee, 0xec, 0x20, 0xf1,
            0x20, 0xfa, 0xf2, 0xfe, 0xe5, 0xe2, 0x20, 0x2c, 0xe8, 0xf6, 0xf3, 0xed, 0xe2, 0x20, 0xe8, 0xe6, 0xee, 0xe1, 0xe8, 0xf0, 0xf2, 0xd1, 0x20, 0x2c, 0xe8, 0xf0, 0xf2, 0xe5, 0xe2, 0x20, 0xe5, 0xd1};

            var result = Stribog.Stribog_L(bytes);

            result = Stribog.Stribog_E(result, bytes2);

            for (int i = 0; i < 64; i++)
            {
                Console.Write(Convert.ToString(result[i], 16));
            }
        }

    }
}